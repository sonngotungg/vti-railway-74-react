*) React examples:

1. hooks (useState, useEffect, useRef, useReducer, useMemo, useCallback, React.memo())
+ useState: lưu các giá trị động
+ useEffect: xử lý các công việc phụ
+ useReducer: tương tụ như useState, dựa trên actionType được truyền vào để update State
+ useMemo: Hạn chế 1 logic chạy đi chạy lại nhiều lần
+ useCallback + React.memo : hạn chế việc 1 Fn khai báo nhiều lần
+ useRef: lưu giá trị giống như useState và còn dùng để trỏ để html element, không  render lại khi giá trị thay đổi

2. lifecycle 
Là vòng đời của component gồm có 3 trạng thái mounting,updateting, un mounting 
+ mounting: thực hiện lần đầu khi load trang
+ updateting: thực hiện khi Dom thay đổi
+ un mounting: thự hiện khi com bị xóa khỏi Dom

3. component communication (parent - child, child - parent, child - child)
+ parent -> child: thông qua Props
+ child -> parent: THông qua callback
+child -> child: có thể thông qua trung gian là parent để giao tiếp thông qua callback và props
Hoặc cả 3 có thể thông qua context API hoặc thư viện như redux hoặc redux toolkit

4. JSX
JSX để viết code trong React giống như trong HTML

5. children

6. react-router-dom
React Router là một thư viện định tuyến cho React 
Nó cho phép điều hướng giữa các chế độ xem khác nhau trong ứng dụng React
React Router-DOM là một phiên bản cụ thể của React Router được tối ưu hóa cho các ứng dụng web

7. redux-toolkit
Redux Toolkit là một thư viện cho Redux giúp đơn giản hóa việc sử dụng Redux
redux-toolkit hỗ trợ setup reducer

8. redux-thunk
Redux-thunk là một middleware cho Redux cho phép xử lý các hành động Redux bất đồng bộ

9. axios
Axios là một thư viện HTTP client dựa trên Promise cho JavaScript.
 Axios sử dụng Promise để thực hiện các yêu cầu bất đồng bộ, sử dụng để gọi các API RESTful

10. custom hook


*) React interview questions:

1. React là gì
là thư viện của JS để xậy dựng giao diện UI

2. Nêu các thành phần quan trọng trong React
+Component: Component là đơn vị cơ bản của giao diện người dùng trong React
+State
+Props
+Event handler: Event handler là các hàm được sử dụng để xử lý các sự kiện.
+Redux: Redux là một thư viện state management cho React

3. JSX là gì
JSX để viết code trong React giống như trong HTML
4. So sánh functional component và class component

5. Phân biệt state và props
+ state : dùng để lưu các giá trị động của giao diện, có thể thay đổi
+ props : dùng để truyền dữ liệu từ cha sang con, chỉ đọc không thay đổi được

6. Trình bày về các hooks
7. trình bày về component lifecycle
Là vòng đời của component gồm có 3 trạng thái mounting,updateting, un mounting 
+ mounting: thực hiện lần đầu khi load trang
+ updateting: thực hiện khi Dom thay đổi
+ un mounting: thự hiện khi com bị xóa khỏi Dom

8. virtualDOM là gì
 nó là 1 cấu trúc cây gồm các js object
 Khi giao diện thay đổi sẽ so sánh giữa virtualDOM và Dom thật. Các thành phần khác nhau sẽ đc render lại
9. phân biệt stateless component và stateful component
Stateless component là những component không có trạng thái.
Chúng chỉ đơn giản là hiển thị dữ liệu mà chúng nhận được dưới dạng prop.
Stateless component được viết dưới dạng hàm.
Chúng không có constructor và không có thuộc tính.

Stateful component là những component có trạng thái. 
Chúng có thể lưu trữ dữ liệu của riêng mình và cập nhật dữ liệu đó khi cần thiết.
Stateful component được viết dưới dạng class.
Chúng có constructor và có thể có các thuộc tính.

10. phân biệt uncontrolled component và controlled component
11. React là one-way binding hay two-way binding
React là one-way binding 
12. HOC là gì
13. React.Fragment là gì
<React.Fragment></React.Fragment>
dùng để bọc 2 hoặc nhiều component mà không sinh ra thẻ thật trong Dom

14. single source of truth trong form là sao
15. cơ chế re-render của React
16. Render Props là gì
17. children dùng làm gì
18. axios là gì
Axios là một thư viện HTTP client dựa trên Promise cho JavaScript.
 Axios sử dụng Promise để thực hiện các yêu cầu bất đồng bộ, sử dụng để gọi các API RESTful

19. react router dom là gì
eact Router là một thư viện định tuyến cho React 
Nó cho phép điều hướng giữa các chế độ xem khác nhau trong ứng dụng React
React Router-DOM là một phiên bản cụ thể của React Router được tối ưu hóa cho các ứng dụng web

20. So sánh redux, react-redux, redux-toolkit
redux là thư viện JS để quản lý State
react-redux hỗ trợ React quản lý State tốt hơn
redux-toolkit hỗ trợ setup reducer

21. redux là gì
redux là thư viện JS để quản lý State

22. redux workflow
dùng hình vẽ để giải thích

23. redux middleware là gì
để xử lý bất đồng bộ  trong redux reducer

24. so sánh context API và redux --> redux devtool
+ context API được build sẵn lưu dữ phần dùng chung của các component trong  context provider
+ redux là thư viện và lưu phần chung của com trong Store

25. khi store thay đổi thì các component có render lại k
tùy vào component có dùng store đó không

26. redux reducer có thể xử lí bất đồng bộ k / gọi API trong reducer
Không, khi gọi API cần có middleware
27. PropTypes là gì